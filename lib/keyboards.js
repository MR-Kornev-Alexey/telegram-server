const {Markup} = require('telegraf')
const callDb = require("../controllers/tutorial.controller");
async function getMainMenu() {
    return Markup.keyboard([
        ['‚åõ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'üåí –†–∞–±–æ—Ç–∞ —Å–æ —Å–Ω–æ–º'],
        ['‚úâÔ∏è  –†–∞—Å—Å—ã–ª–∫–∞', '‚úè –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]).oneTime().resize()
}
async function getMainMenuFirst() {
    return Markup.keyboard([
        ['üåí –†–∞–±–æ—Ç–∞ —Å–æ —Å–Ω–æ–º', '‚úè –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['‚ùîÔ∏è  –ü–æ–º–æ—â—å', 'üë∂ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ' ]
    ]).oneTime().resize()
}
async function getMainMenuDream() {
    return Markup.keyboard([
        ['Ô∏è1Ô∏è‚É£ –º–µ—Ç–æ–¥–∏–∫–∞', 'Ô∏è2Ô∏è‚É£ –º–µ—Ç–æ–¥–∏–∫–∞'],
        ['Ô∏è3Ô∏è‚É£ –º–µ—Ç–æ–¥–∏–∫–∞', 'Ô∏è4Ô∏è‚É£ –º–µ—Ç–æ–¥–∏–∫–∞']
    ]).oneTime().resize()
}
async function getClose() {
    return    {
        "reply_markup": {
            "inline_keyboard": [
                [
                    {
                        "text": "–ó–∞–∫—Ä—ã—Ç—å",
                        "callback_data": "close"
                    }
                ]
            ]
        }
}
}
async function getService(user) {
    let button = []
    try {
         if (user.assess_homeworks) {
            button.push(
                [
                    {
                        "text": "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                        "callback_data": "homeworks_button"
                    }
                ],
                [
                    {
                        "text": "–†–∞—Å—Å—ã–ª–∫–∞",
                        "callback_data": "sending_button"
                    }
                ]
            )
        }
        if (user. access_dream) {
            button.push(
                [
                    {
                        "text": "–†–∞–±–æ—Ç–∞ —Å–æ —Å–Ω–æ–º",
                        "callback_data": "dream_button"
                    }
                ]
            )
        }
        if (user. access_webinars) {
            button.push(
                [
                    {
                        "text": "–í–µ–±–∏–Ω–∞—Ä—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é",
                        "callback_data": "webinar_button"
                    }
                ]
            )
        }
        button.push(
            [
                {
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback_data": "close_service"
                }
            ]
        )
        return    {
            reply_markup: {
                inline_keyboard: button
            }
        }
    }catch (e) {
       console.log(e)
    }
    // console.log(user)

}

async function getWatch(result) {
    if(!result){
        return    {
            "reply_markup": {
                "inline_keyboard": [
                    [
                        {
                            "text": "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ",
                            "callback_data": "watch"
                        }
                    ],
                    [
                        {
                            "text": "–ó–∞–∫—Ä—ã—Ç—å",
                            "callback_data": "close_video"
                        }
                    ]
                ]
            }
        }

    } else {
        return    {
            "reply_markup": {
                "inline_keyboard": [
                      [
                        {
                            "text": "–ó–∞–∫—Ä—ã—Ç—å",
                            "callback_data": "close_video"
                        }
                    ]
                ]
            }
        }
    }

}
module.exports = {
    getWatch,
    getClose,
    getMainMenu,
    getMainMenuDream,
    getMainMenuFirst,
    getService
};