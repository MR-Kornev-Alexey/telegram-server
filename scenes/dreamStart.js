const {Scenes: {BaseScene}} = require('telegraf');
const callDb = require("../controllers/tutorial.controller")
const {getMainMenuDream} = require("../lib/keyboards");
const HelenFunction = require("../helenFunction/function");

class dreamStartSceneGenerator {

    GenDreamBeginScene() {
        const dream_begin = new BaseScene('dream_begin')
        const firstText = '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å–æ —Å–Ω–æ–º —Ä–µ–±–µ–Ω–∫–∞. \n' +
            '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.\n' +
            '\n' +
            '–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äú–ú–µ–Ω—é‚Äù (–∫–Ω–æ–ø–∫–∞ –°–ò–ù–ï–ì–û —Ü–≤–µ—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É)  –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É - ‚Äú–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞‚Äù\n' +
            '\n' +
            '–î–ª—è —Ä–∞–±–æ—Ç—ã: \n' +
            '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–°–¢–ê–†–¢‚Äù\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö 4 –º–µ—Ç–æ–¥–∏–∫ –¥–ª—è –ö–†–ê–¢–ö–û–ì–û –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.\n' +
            '–ï—Å–ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞,  –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú‚û° –î–∞–ª—å—à–µ‚Äù –∏, –ø–µ—Ä–µ–π–¥—è –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–º—É –≤–∏–¥–µ–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–µ—Ç–æ–¥–∏–∫–æ–π. –î–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ —ç—Ç–æ–π –º–µ—Ç–æ–¥–∏–∫–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã‚Äù –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å\n' +
            '\n' +
            '–ï—Å–ª–∏  –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –í–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚Äù–ù–∞–∑–∞–¥‚Äù –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
            '\n' +
            '–í–Ω–∏–º–∞–Ω–∏–µ! –†–∞–∑–¥–µ–ª—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ —Å–Ω–∞–º–∏, —Ä–∞–Ω–Ω–∏–º–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è–º–∏, –ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏–µ–π –¥–Ω–µ–≤–Ω—ã—Ö —Å–Ω–æ–≤, —Ä–∏—Ç—É–∞–ª–∞–º–∏, –Ω–æ—á–Ω—ã–º–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏ –∏ —Ç.–¥. —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ‚Äú–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã‚Äù ' +
            '–≤ –∫–∞–∂–¥–æ–π –∏–∑ –º–µ—Ç–æ–¥–∏–∫.\n' +
            '\n' +
            '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –ø–æ—Ö–æ–¥–∏—Ç–µ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –º–µ–Ω—é, –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏.\n'
        const webApp = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–ü–æ  –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Å—å–±–∞–º –º—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–¥–µ–ª–∞–ª–∏ we–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n' +
            '–û–Ω–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ß–ê–¢-–ë–û–¢–£ , –Ω–æ –º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º, –∫–æ–≥–¥–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
            '–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ http://mrk.digital/'

        let buttonStartPressed = false;

        async function startMainDreamMenu(ctx) {
            if (!buttonStartPressed) {
                buttonStartPressed = true;
                try {
                    await ctx.reply(webApp,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {text: '–°–¢–ê–†–¢', callback_data: 'start_data_dream'}
                                    ],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream_begin'}]
                                ]
                            }
                        },
                        await getMainMenuDream()
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonStartPressed = false;
                }
            }
        }

        let buttonStartBeginPressed = false;
        dream_begin.enter(
            async (ctx) => {
                if (!buttonStartBeginPressed) {
                    buttonStartBeginPressed = true;
                    try {
                        const user = ctx.scene.state.user;
                        await callDb.getOneUser(user)
                            .then(async (result) => {
                                console.log(result)
                                if (result.access_dream) {
                                    await startMainDreamMenu(ctx)
                                } else {
                                    await ctx.telegram.sendMessage(result.chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –ø–æ —Å–Ω—É.\n' +
                                        '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –°–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n https://t.me/mrk_service',
                                        {
                                            reply_markup: {
                                                inline_keyboard: [
                                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream_begin'}]
                                                ]
                                            }
                                        }
                                    )
                                }
                            }).catch(e => {
                                    console.log(e)
                                }
                            )
                    } catch (e) {
                        console.log(e)
                    } finally {
                        buttonStartBeginPressed = false;
                    }
                }
            })

        dream_begin.action('close_dream_begin', async ctx => {
            const chatId = ctx.update.callback_query.from.id
            const messageId = ctx.update.callback_query.message.message_id
            ctx.answerCbQuery()
            if (chatId) {
                try {
                    await ctx.telegram.deleteMessage(chatId, messageId)
                    await ctx.scene.leave()
                } catch (e) {
                    console.log(e)
                }
            }
        });
        dream_begin.action('start_data_dream', async ctx => {
            const chatId = ctx.update.callback_query.from.id
            const messageId = ctx.update.callback_query.message.message_id
            ctx.answerCbQuery()
            if (chatId) {
                try {
                    await ctx.telegram.deleteMessage(chatId, messageId)
                    await ctx.scene.leave()
                    await ctx.scene.enter('dream_start')
                } catch (e) {
                    console.log(e)
                }
            }
        });
        return dream_begin
    }

    GenDreamStartScene() {
        const dream_start = new BaseScene('dream_start')
        const title = [
            `Ô∏è1Ô∏è‚É£  –ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è\n`,
            `Ô∏è2Ô∏è‚É£  –ú–µ—Ç–æ–¥–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n`,
            `Ô∏èÔ∏è3Ô∏è‚É£  –ú–µ—Ç–æ–¥–∏–∫–∞ –≤—ã—Å–∏–∂–∏–≤–∞–Ω–∏—è\n`,
            `Ô∏èÔ∏è4Ô∏è‚É£  –ú–µ—Ç–æ–¥–∏–∫–∞ —Ñ–µ–π–¥–∏–Ω–≥–∞\n`
        ]
        const youtubeLinks = [
            'DMhIQSOkr-Y', 'Y68wA60ctNw', 'oI6GWZepGSw', 'Se27z9svlww'
        ]
        const methods = [
            {
                name: "method_1",
                emoji: "1Ô∏è‚É£",
                title: "–ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
                text: "\n" +
                    "–°—É–ø–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥. –ü–æ–¥—Ö–æ–¥–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —à–∞–≥–∞ –æ—Ç—á–∞—è–Ω—å—è. –ö–ª–∞–¥–µ–º —Ä–µ–±–µ–Ω–∫–∞ –≤ –∫—Ä–æ–≤–∞—Ç—å –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. –ó–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º –∏–ª–∏ –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è.\n" +
                    "–ü–æ–¥—Ö–æ–¥–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º –Ω–∞ –≥—Ä–∞–Ω–∏, —ç—Ç–æ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞, –µ—Å–ª–∏ –º–∞–º–∞:\n" +
                    "\n" +
                    "‚úÖ –≤–Ω–µ–∑–∞–ø–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É\n" +
                    "‚úÖ –∑–∞–±–æ–ª–µ–ª–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è\n" +
                    "‚úÖ –≤—ã–Ω—É–∂–¥–µ–Ω–∞ —Å—Ä–æ—á–Ω–æ —É–µ—Ö–∞—Ç—å –±–µ–∑ —Ä–µ–±–µ–Ω–∫–∞\n" +
                    "\n" +
                    "–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –º–µ—Ç–æ–¥–∏–∫–∞–º –æ–±—É—á–µ–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º—É –∑–∞—Å—ã–ø–∞–Ω–∏—é –∏ —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–æ–ª–µ–µ –º—è–≥–∫–∏—Ö –º–µ—Ç–æ–¥–∏–∫.\n",
                video: "https://youtu.be/cdey8ZpTD9k",
                number: 1,
            },
            {
                name: "method_2",
                emoji: "2Ô∏è‚É£",
                title: "–ú–µ—Ç–æ–¥–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
                text: "\n" +
                    "–ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ —Å –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –º–∞–ª—ã—à–µ–π —Å 4 –º–µ—Å—è—Ü–µ–≤. –£–∂–µ –Ω–∞ 2-5 –¥–µ–Ω—å —Ä–µ–±–µ–Ω–æ–∫ –º–µ–Ω—å—à–µ –ø–ª–∞—á–µ—Ç –∏  –±—ã—Å—Ç—Ä–µ–µ –∑–∞—Å—ã–ø–∞–µ—Ç –≤ —Å–≤–æ–µ–π –∫—Ä–æ–≤–∞—Ç–∫–µ.\n" +
                    "–í –æ—Å–Ω–æ–≤–µ - –∂–µ—Å—Ç–∫–∞—è —Å—Ö–µ–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤. –£–ª–æ–∂–∏–≤ —Ä–µ–±—ë–Ω–∫–∞ –≤ –∫—Ä–æ–≤–∞—Ç–∫—É, —Ä–æ–¥–∏—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. " +
                    "–†–∞–∑—Ä–µ—à–µ–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ —É—Å–ø–æ–∫–æ–∏—Ç—å –∫—Ä–æ—Ö—É. –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞—Ö–æ–¥–∞–º–∏ —É–¥–ª–∏–Ω—è—é—Ç—Å—è.\n" +
                    "\n" +
                    "–•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞–º –∫–æ—Ç–æ—Ä—ã–µ:\n" +
                    "‚úÖ –°–æ–≤—Å–µ–º –Ω–µ —Å–ø—è—Ç\n" +
                    "‚úÖ –ù–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –≥—Ä–∞–Ω–∏ –Ω–µ—Ä–≤–Ω–æ–≥–æ —Å—Ä—ã–≤–∞\n" +
                    "‚úÖ —Å–∫–æ—Ä–æ —Ä–æ–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞\n" +
                    "‚úÖ –Ω–µ —Å–ø–æ—Å–æ–±–Ω—ã –≤—ã–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –º–µ–¥–ª–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∏–∫–∞–º \n" +
                    "\n" +
                    "–û–¥–Ω–∞–∫–æ —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —á—Ç–æ:\n" +
                    "‚úÖ –†–µ–±–µ–Ω–æ–∫ –º–Ω–æ–≥–æ –ø–ª–∞—á–µ—Ç\n" +
                    "‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –¥–æ–ª–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—á —Ä–µ–±–µ–Ω–∫–∞\n" +
                    "‚úÖ –ú–µ—Ç–æ–¥–∏–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–µ–≥–∫–æ–≤–æ–∑–±—É–¥–∏–º—ã–º –¥–µ—Ç—è–º\n" +
                    "‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –≤–æ–ª–∏\n",
                video: "https://youtu.be/cdey8ZpTD9k",
                number: 2,
            },
            {
                name: "method_3",
                emoji: "3Ô∏è‚É£",
                title: "–ú–µ—Ç–æ–¥–∏–∫–∞ –≤—ã—Å–∏–∂–∏–≤–∞–Ω–∏—è",
                text: "\n" +
                    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –º–∞–ª—ã—à–µ–π —Å 4 –º–µ—Å—è—Ü–µ–≤.\n" +
                    "–ö–ª–∞–¥—ë–º —Ä–µ–±—ë–Ω–∫–∞ –≤ –∫—Ä–æ–≤–∞—Ç–∫—É –∏ —Å–∞–¥–∏–º—Å—è —Ä—è–¥–æ–º –Ω–∞ —Å—Ç—É–ª. –ú–∞–ª—ã—à–∞ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ–º –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º, —à–∏–ø–µ–Ω–∏–µ–º, —Ä–∏—Ç–º–æ–º –¥—ã—Ö–∞–Ω–∏—è. " +
                    "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å–≤–æ—é –ø–æ–º–æ—â—å, –æ—Ç–æ–¥–≤–∏–≥–∞—è —Å—Ç—É–ª –≤—Å–µ –¥–∞–ª—å—à–µ –∏ –¥–∞–ª—å—à–µ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è. \n" +
                    "\n" +
                    "–ü–ª—é—Å—ã: \n" +
                    "‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ  –∏ –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n" +
                    "‚úÖ –ú–∏–Ω–∏–º—É–º —Å–ª–µ–∑\n" +
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–∞–ø—ã –∏ –¥—Ä—É–≥–∏–µ —á–ª–µ–Ω—ã —Å–µ–º—å–∏\n" +
                    "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º —Å–Ω–µ\n" +
                    "\n" +
                    "–ú–∏–Ω—É—Å—ã: \n" +
                    "‚úÖ –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–Ω–µ–µ —á–µ—Ä–µ–∑ 2-3 –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n" +
                    "‚úÖ –ù–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö –º–∞–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—â–∏—Ö —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏\n" +
                    "‚úÖ –ù–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∏—Å–ø—ã—Ç—ã–≤–∞—é—â–∏—Ö –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å\n",
                video: "https://youtu.be/cdey8ZpTD9k",
                number: 3,
            },
            {
                name: "method_4",
                emoji: "4Ô∏è‚É£",
                title: "–ú–µ—Ç–æ–¥–∏–∫–∞ —Ñ–µ–π–¥–∏–Ω–≥–∞",
                text: "\n" +
                    "–°–∞–º–∞—è –º—è–≥–∫–∞—è –∏–∑ –º–µ—Ç–æ–¥–∏–∫.  –°—É—Ç—å - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–∞–ª—ã—à—É  –ø–æ–º–æ—â–∏ –ø—Ä–∏ –∑–∞—Å—ã–ø–∞–Ω–∏–∏. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—É—á–∏–≤ –Ω–æ–≤—ã–º —Å–ø–æ—Å–æ–±–∞–º –∑–∞—Å—ã–ø–∞–Ω–∏—è. \n" +
                    "\n" +
                    "–ú–µ—Ç–æ–¥–∏–∫–∞ –û–ß–ï–ù–¨ –¥–æ–ª–≥–∞—è –∏ –ø—Ä–æ–π–¥—è –ø–∞—Ä—É —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥, –í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —à–∞–≥, –∞ —Ç–æ –∏ –¥–≤–∞ –Ω–∞–∑–∞–¥. –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Ç–µ—Ä–ø–µ–ª–∏–≤—É—é –º–∞–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É, " +
                    "–Ω–µ –≤–∏–¥—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ –∏ –Ω–µ–¥–µ–ª–∏.\n" +
                    "\n" +
                    "–ü–ª—é—Å—ã: \n" +
                    "‚úÖ –û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º—è–≥–∫–∏–º –º–µ—Ç–æ–¥–∏–∫–∞–º\n" +
                    "‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç —Å–ª–µ–∑\n" +
                    "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞\n" +
                    "\n" +
                    "–ú–∏–Ω—É—Å—ã: \n" +
                    "‚úÖ –û—á–µ–Ω—å –¥–æ–ª–≥–∏–π –∏ —Ç—Ä—É–¥–æ–µ–º–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å (1,5-2 –º–µ—Å—è—Ü–∞)\n" +
                    "‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–≥—Ä–æ–º–Ω–æ–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π \n" +
                    "‚úÖ –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ \n" +
                    "‚úÖ –ò–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  –≤—ã—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—É —á—Ç–æ-—Ç–æ –ø–æ–º–µ—à–∞–µ—Ç (–∑—É–±–∫–∏, —Å–∫–∞—á–æ–∫ —Ä–æ—Å—Ç–∞, –±–æ–ª–µ–∑–Ω—å, –æ—Ç—ä–µ–∑–¥)\n" +
                    "‚úÖ –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç —Å–∏–ª—å–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å\n",
                video: "https://youtu.be/cdey8ZpTD9k",
                number: 4,
            },
        ];
        const dataSixSleepMore = [
            ['jBcB0ixsNVk',
                'GMaFlC6NbY0',
                'yS97syATarA',
                'yp_YZM4qPxE'
            ],// 1 –¥–µ–Ω—å
            ['Eld5BRMppgU',
                'vkweZ3RIGqk',
                'oZpaU6JBRYM',
                'h6AmOstnLbg'
            ],// 2 –¥–µ–Ω—å
            [
                'qb9CrD6CGb4',
                'YxMaxRJWgyo',
                'FHHsQabjyaI',
                'q1Il_vqZDfE'
            ] //—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        ]
        const rituals = [
            '_SdMNKlvbXg',
            'gjsOW2yskGY',
            'UN_E0sBQko0'
        ]
        const printDreams = [
            'http://elenakorneva.site/pdf/exception.pdf',
            'http://elenakorneva.site/pdf/intervals.pdf',
            'http://elenakorneva.site/pdf/hatching.pdf',
            'http://elenakorneva.site/pdf/feyding.pdf'
        ]
        const dayDreams = [
            'RzVEotFY9fw',
            'bdXHvSrJAZY',
            'YWaoAKTwhT8',
            'EnOCyV4pxqU'
        ]
        const faqArray = [
            // 'P8QZkYbQyDw',
            'jgOurBQPyeA',
            'hMh48kvR2Cc',
            'CKrJC3Mraqo',
            'PZNCYyJAgmQ',
            'nC33KnF8Eb8',
            'WyMx1dK2twU',
            'WC3B2AliqXA',
            '3SxJac3J7p8',
            'l4eRF7nKa_0'
        ]
        let button1Pressed = false;
        dream_start.enter(
            async (ctx) => {
                if (!button1Pressed) {
                    button1Pressed = true;
                    try {
                        await ctx.reply(
                            `‚ô•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–æ–¥–∏–∫—É ‚ô•Ô∏è\n`,
                            await keyMain()
                        )
                    } catch (e) {
                        console.log(e)
                    } finally {
                        button1Pressed = false;
                    }
                }
            }
        )

        async function keyMain() {
            try {
                return {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: "Ô∏è1Ô∏è‚É£ –ü–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", callback_data: 'method_1'}
                            ],
                            [
                                {text: "Ô∏è2Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", callback_data: 'method_2'}
                            ],
                            [
                                {text: "Ô∏è3Ô∏è‚É£ –í—ã—Å–∏–∂–∏–≤–∞–Ω–∏—è", callback_data: 'method_3'}
                            ],
                            [{text: "Ô∏è4Ô∏è‚É£ –§–µ–π–¥–∏–Ω–≥–∞", callback_data: 'method_4'}
                            ],
                            [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                        ]
                    },
                    parse_mode: "markdown"
                }
            } catch (e) {
                console.log(e)
            }

        }

        let buttonMainPressed = false;

        async function mainMenu(ctx) {
            if (!buttonMainPressed) {
                buttonMainPressed = true;
                try {
                    await ctx.reply(
                        `‚ô•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–æ–¥–∏–∫—É ‚ô•Ô∏è\n`,
                        await keyMain()
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonMainPressed = false;
                }
            }
        }

        let buttonDataDreamPressed = false;
        dream_start.action('data_dream', async ctx => {
                if (!buttonDataDreamPressed) {
                    buttonDataDreamPressed = true;
                    try {
                        ctx.answerCbQuery()
                        await mainMenu(ctx)
                            , await getMainMenuDream()
                    } catch (e) {
                        console.log(e)
                    } finally {
                        buttonDataDreamPressed = false;
                    }
                }
            }
        );

        dream_start.action('close_dream', async ctx => {
            const chatId = ctx.update.callback_query.from.id
            const messageId = ctx.update.callback_query.message.message_id
            ctx.answerCbQuery()
            if (chatId) {
                try {
                    await ctx.telegram.deleteMessage(chatId, messageId)
                    await ctx.scene.leave()
                }catch (e) {
                    console.log(e)
                }
            } else {}
        });
        dream_start.action('close_frame', async ctx => {
            const chatId = ctx.update.callback_query.from.id
            const messageId = ctx.update.callback_query.message.message_id
            ctx.answerCbQuery()
            if (chatId) {
                try {
                    await ctx.telegram.deleteMessage(chatId, messageId)
                }catch (e) {
                    console.log(e)
                }
            } else {}
        });

        let buttonReturnFramePressed = false;
        dream_start.action('return_frame', async ctx => {
            if (!buttonReturnFramePressed) {
                buttonReturnFramePressed = true;
                try {
                    await ctx.answerCbQuery()
                    const msg = ctx.update.callback_query.message
                    let editedMessage =
                        `‚ô•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–æ–¥–∏–∫—É ‚ô•Ô∏è\n`
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, await keyMain())
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonReturnFramePressed = false;
                }
            }
        });

        let buttonCommonPressed = false;

        async function getMethodCommon(ctx, editedMessage, number) {
            if (!buttonCommonPressed) {
                buttonCommonPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚û° –î–∞–ª—å—à–µ", callback_data: 'next_frame_' + number}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: 'return_frame'}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonCommonPressed = false;
                }
            }
        }

        let buttonNextPressed = false;

        async function nextFiveCScreen(ctx, editedMessage, number) {
            if (!buttonNextPressed) {
                buttonNextPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø", callback_data: 'prepare_' + number}],
                                    [{text: "–†–∏—Ç—É–∞–ª—ã", callback_data: 'rituals_' + number}],
                                    [{text: "–ù–æ—á–Ω–æ–π —Å–æ–Ω", callback_data: 'sleep_dream_' + number}],
                                    [{text: "–î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω", callback_data: 'day_dream_' + number}],
                                    [{text: "–£–¥–ª–∏–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —Å–Ω–æ–≤", callback_data: 'long_dream_' + number}],
                                    [{text: "–†–∞–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", callback_data: 'early_awakening_' + number}],
                                    [{text: "–í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–Ω–∞", callback_data: 'important_conditions_' + number}],
                                    [{text: "–ù–æ—á–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data: 'night_feedings_' + number}],
                                    [{
                                        text: "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –±–ª–∏–∑–Ω–µ—Ü–∞–º–∏, –ø–æ–≥–æ–¥–∫–∞–º–∏ ...",
                                        callback_data: 'twins_' + number
                                    }],
                                    [{text: "–í–æ–ø—Ä–æ—Å—ã - –æ—Ç–≤–µ—Ç—ã", callback_data: 'questions_answers_' + number}],
                                    [{text: "–ì–∞–π–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏", callback_data: 'guide_print_' + number}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `back_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonNextPressed = false;
                }
            }
        }

        let buttonFourPressed = false;

        async function nextFourCScreen(ctx, editedMessage, number) {
            if (!buttonFourPressed) {
                buttonFourPressed = true;
                try {
                    // console.log(editedMessage)
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚û° –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã", callback_data: 'five_frame_' + number}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: 'return_frame'}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]

                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonFourPressed = false;
                }
            }
        }

        let buttonSixPressed = false;

        async function nextSixScreenOne(ctx, editedMessage, number) {
            if (!buttonSixPressed) {
                buttonSixPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak6_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonSixPressed = false;
                }
            }
        }

        let buttonSixScreenOnePressed = false;

        async function nextSixScreenOneFaq(ctx, editedMessage, number) {
            if (!buttonSixScreenOnePressed) {
                buttonSixScreenOnePressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak9_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonSixScreenOnePressed = false;
                }
            }
        }

        let button7Pressed = false;

        async function nextSevenCScreen(ctx, editedMessage, number) {
            if (!button7Pressed) {
                button7Pressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak7_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    button7Pressed = false;
                }
            }
        }

        let buttonPressed = false;

        async function nextEightScreen(ctx, editedMessage, number) {
            if (!buttonPressed) {
                buttonPressed = true;
                try {
                    const msg = ctx.update.callback_query.message;
                    await ctx.telegram.editMessageText(
                        ctx.chat.id,
                        msg.message_id,
                        undefined,
                        editedMessage,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak8_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: "close_dream"}]
                                ]
                            }
                        }
                    );
                } catch (e) {
                    console.log(e);
                } finally {
                    buttonPressed = false;
                }
            }
        }

        let buttonSevenScreenFAQPressed = false;

        async function nextSevenScreenFAQ(ctx, editedMessage, number) {
            if (!buttonSevenScreenFAQPressed) {
                buttonSevenScreenFAQPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    // [{text: "–Ø —Å–¥–∞–ª–∞—Å—å ", callback_data: `faq7_0`}],
                                    [{text: "–°—Ç—Ä–µ—Å—Å –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–ª–∞—á–µ", callback_data: `faq7_1`}],
                                    [{text: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ–¥–Ω—ã—Ö ", callback_data: `faq7_2`}],
                                    [{text: "–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–∞ –ø—É—Å—Ç—ã—à–∫—É", callback_data: `faq7_3`}],
                                    [{text: "–ö–∞–∫ —É—Å–ø–æ–∫–æ–∏—Ç—Å—è –º–∞–º–µ ", callback_data: `faq7_4`}],
                                    [{text: "–ö–∞–∫–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞—Å—ã–ø–∞–Ω–∏–∏ ", callback_data: `faq7_5`}],
                                    [{text: "–ü–µ–ª–µ–Ω–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞", callback_data: `faq7_6`}],
                                    [{text: "–†–≤–æ—Ç–∞ –ø—Ä–∏ –∑–∞—Å—ã–ø–∞–Ω–∏–∏ ", callback_data: `faq7_7`}],
                                    [{text: "–†–∞—Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è", callback_data: `faq7_8`}],
                                    [{text: "–°–æ—Å–∞–Ω–∏–µ –ø–∞–ª—å—á–∏–∫–∞ –ø—Ä–∏ –∑–∞—Å—ã–ø–∞–Ω–∏–∏", callback_data: `faq7_9`}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak6_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonSevenScreenFAQPressed = false;
                }
            }
        }

        let buttonSevenScreenScreenRitualsPressed = false;

        async function nextSevenCScreenRituals(ctx, editedMessage, number) {
            if (!buttonSevenScreenScreenRitualsPressed) {
                buttonSevenScreenScreenRitualsPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "–†–∏—Ç—É–∞–ª –Ω–∞ –¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", callback_data: `rit7_1`}],
                                    [{text: "–†–∏—Ç—É–∞–ª –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ", callback_data: `rit7_2`}],
                                    [{text: "–†–∏—Ç—É–∞–ª –Ω–∞ –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω", callback_data: `rit7_3`}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak6_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonSevenScreenScreenRitualsPressed = false;
                }
            }
        }

        let buttonSevenScreenSleepPressed = false;

        async function nextSevenScreenSleep(ctx, editedMessage, number) {
            if (!buttonSevenScreenSleepPressed) {
                buttonSevenScreenSleepPressed = true;
                try {
                    const msg = ctx.update.callback_query.message
                    await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, undefined, editedMessage, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{text: "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å", callback_data: `first_frame_${number}`}],
                                    [{text: "–í—Ç–æ—Ä–æ–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏ ", callback_data: `second_frame_${number}`}],
                                    [{text: "–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data: `results_frame_${number}`}],
                                    [{text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `bak6_frame_${number}`}],
                                    [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_dream'}]
                                ]
                            }
                        }
                    )
                } catch (e) {
                    console.log(e)
                } finally {
                    buttonSevenScreenSleepPressed = false;
                }
            }
        }

        dream_start.action(/(\d+)/, async ctx => {
            try {
                await ctx.answerCbQuery()
                const newIdAction = ctx.update.callback_query.data
                console.log("The !!!!!  newIdAction id is:", newIdAction)
                const index = newIdAction[newIdAction.length - 1] - 1;
                const firstFour = newIdAction.substring(0, 4);
                if (firstFour === 'meth') {
                    const editedMessageThree = `${title[index]}\n${methods[index].text}`;
                    await getMethodCommon(ctx, editedMessageThree, index + 1);
                }
                if (firstFour === 'next' || firstFour === 'back') {
                    const editedMessageThree = `https://youtu.be/${youtubeLinks[index]}\n\n${title[index]}\n`;
                    await nextFourCScreen(ctx, editedMessageThree, index + 1);
                } else if (firstFour === 'five' || firstFour === 'bak6') {
                    const editedMessageFour = `${title[index]}\n`;
                    await nextFiveCScreen(ctx, editedMessageFour, index + 1);
                } else if (firstFour === 'prep') {
                    const editedMessageFive = `–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø\n https://youtu.be/JchmPK8tgZY\n`;
                    await nextSixScreenOne(ctx, editedMessageFive, index + 1);
                } else if (firstFour === 'long') {
                    const editedMessageFive = `–£–¥–ª–∏–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —Å–Ω–æ–≤\n https://youtu.be/Ph2FEDmlTGY\n`;
                    await nextSixScreenOne(ctx, editedMessageFive, index + 1);
                } else if (firstFour === 'earl') {
                    const editedMessageFive = `–†–∞–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ\n https://youtu.be/dpBecuwLwZk\n`;
                    await nextSixScreenOne(ctx, editedMessageFive, index + 1);
                } else if (firstFour === 'impo') {
                    const editedMessageFive = `–í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–Ω–∞\n https://youtu.be/ZOuvJq1fHQg\n`;
                    await nextSixScreenOne(ctx, editedMessageFive, index + 1);
                } else if (firstFour === 'nigh') {
                    const editedMessageFive = `–ù–æ—á–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n https://youtu.be/C4MvX4piprY\n`;
                    await nextSixScreenOne(ctx, editedMessageFive, index + 1);
                } else if (firstFour === 'slee' || firstFour === 'bak7') {
                    const editedMessageFive = `${title[index]}\n–ù–æ—á–Ω–æ–π —Å–æ–Ω\n –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª`;
                    await nextSevenScreenSleep(ctx, editedMessageFive, index + 1);
                }
                if (firstFour === 'firs') {
                    const editedMessageSix = `https://youtu.be/${dataSixSleepMore[0][index]}\n`;
                    await nextSevenCScreen(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'seco') {
                    const editedMessageSix = `https://youtu.be/${dataSixSleepMore[1][index]}\n`;
                    await nextSevenCScreen(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'resu') {
                    const editedMessageSix = `https://youtu.be/${dataSixSleepMore[2][index]}\n`;
                    await nextSevenCScreen(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'ritu' || firstFour === 'bak8') {
                    const editedMessageSix = `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n  7 —ç–∫—Ä–∞–Ω!\n`;
                    await nextSevenCScreenRituals(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'rit7') {
                    const editedMessageSix = `https://youtu.be/${rituals[index]}\n`;
                    await nextEightScreen(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'day_') {
                    const editedMessageSix = `${title[index]}\n–î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω\n https://youtu.be/${dayDreams[index]}\n`;
                    await nextSixScreenOne(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'twin') {
                    const editedMessageSix = `–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –±–ª–∏–∑–Ω–µ—Ü–∞–º–∏, –¥–≤–æ–π–Ω—è—à–∫–∞–º–∏,—Ç—Ä–æ–π–Ω—è—à–∫–∞–º–∏  –ø–æ–≥–æ–¥–∫–∞–º–∏\n http://elenakorneva.site/pdf/twins.pdf`;
                    await nextSixScreenOne(ctx, editedMessageSix, index + 1);
                }
                if (firstFour === 'guid') {
                    const editedMessageSix = `${title[index]}\n–ì–∞–π–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏\n${printDreams[index]}\n`;
                    await nextSixScreenOne(ctx, editedMessageSix, index + 1);
                } else if (firstFour === 'ques' || firstFour === 'bak9') {
                    const editedMessageFive = `–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å`;
                    await nextSevenScreenFAQ(ctx, editedMessageFive, index + 1);
                }

                if (firstFour === 'faq7') {
                    const editedMessageSix = `https://youtu.be/${faqArray[index]}\n`;
                    await nextSixScreenOneFaq(ctx, editedMessageSix, index + 1);
                } else {
                    // const editedMessageThree = `https://youtu.be/${youtubeLinks[index]}\n\n${title[index]}\n`;
                    // await nextFourCScreen(ctx, editedMessageThree, index + 1);
                }
            } catch (e) {
                console.log(e)
            }

        });

        let buttonMessagePressed = false;
        dream_start.on('message', async (ctx) => {
                if (!buttonMessagePressed) {
                    buttonMessagePressed = true;
                    try {
                        await ctx.reply('–≠—Ç–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò–¥–µ–º –≤ –Ω–∞—á–∞–ª–æ?', {
                                reply_markup: {
                                    inline_keyboard: [
                                        [{text: "üìï –ó–∞–∫—Ä—ã—Ç—å", callback_data: 'close_frame'}]
                                    ]
                                }
                            }
                        )
                        await ctx.scene.reenter()
                    } catch (e) {
                        console.log(e)
                    } finally {
                        buttonMessagePressed = false;
                    }
                }
            }
        )

        return dream_start
    }
}

module.exports = dreamStartSceneGenerator